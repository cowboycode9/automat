name: Generate Unique NBA Script
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  generate-script:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
      
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - run: |
        pip install requests feedparser playwright beautifulsoup4
        playwright install chromium
        
    - name: Generate Script
      run: |
        cat > gen.py << 'EOF'
        import requests, feedparser, re, time
        from bs4 import BeautifulSoup
        from playwright.sync_api import sync_playwright

        class Generator:
            def __init__(self):
                self.api = "https://text.pollinations.ai"
            
            def get_video_id(self, handle):
                try:
                    h = handle.replace('@', '').split('/')[-1]
                    if 'amhoops' in h.lower(): return "UCtG-elouHQdUnpN9cVLdltg"
                    feed = feedparser.parse(f"https://www.youtube.com/feeds/videos.xml?user={h}")
                    if not feed.entries:
                        feed = feedparser.parse(f"https://www.youtube.com/feeds/videos.xml?channel_id={h}")
                    if feed.entries:
                        return re.search(r"v=([a-zA-Z0-9_-]+)", feed.entries[0].link).group(1)
                except: pass
                return None
            
            def get_transcript(self, vid_id):
                with sync_playwright() as p:
                    try:
                        page = p.chromium.launch(headless=True).new_page()
                        page.goto("https://youtubetotranscript.com/", timeout=30000)
                        page.fill("input.w-full.mb-2.truncate.input.input-bordered.input-rounded.sm\\:w-sm.sm\\:mb-0.sm\\:mr-2", f"https://youtu.be/{vid_id}")
                        page.click("button.w-full.btn.btn-secondary.btn-rounded.sm\\:w-auto")
                        page.wait_for_load_state("networkidle", timeout=30000)
                        time.sleep(2)
                        soup = BeautifulSoup(page.content(), 'html.parser')
                        segments = soup.find('div', {'id': 'transcript'}).find_all('span', class_='transcript-segment')
                        return " ".join(s.get_text().strip() for s in segments if s.get_text().strip())
                    except Exception as e:
                        print(f"Error: {e}")
                        return ""
            
            def rewrite(self, text):
                prompt = f"Rewrite this NBA text to be unique while keeping the same meaning. Make it conversational with [PAUSE] markers for TTS. Keep all NBA names 100% accurate (Tyrese Maxey, Jared McCain, Kyle Lowry, Kelly Oubre Jr, Nikola Jokic, etc): {text}"
                try:
                    r = requests.get(f"{self.api}/{requests.utils.quote(prompt)}", timeout=30)
                    return r.text.strip() if r.status_code == 200 else text
                except: return text
            
            def fix_names(self, text):
                fixes = {
                    r'Dyres?\s*Maxi': 'Tyrese Maxey',
                    r'VJ\s*Edgecom': 'Jared McCain',
                    r'Kyle\s*Larry': 'Kyle Lowry', 
                    r'Kelly\s*Ubé': 'Kelly Oubre Jr',
                    r'Nicole?\s*Joic': 'Nikola Jokic'
                }
                for p, r in fixes.items():
                    text = re.sub(p, r, text, flags=re.IGNORECASE)
                return text
            
            def run(self):
                print("🚀 Starting...")
                vid_id = self.get_video_id("https://youtube.com/@amhoops")
                if not vid_id: return print("❌ No video found")
                
                print(f"📹 Video: {vid_id}")
                transcript = self.get_transcript(vid_id)
                if not transcript: return print("❌ No transcript")
                
                print(f"📝 Transcript: {len(transcript)} chars")
                chunks = [transcript[i:i+2000] for i in range(0, len(transcript), 2000)]
                
                print(f"🔄 Rewriting {len(chunks)} chunks...")
                result = []
                for i, chunk in enumerate(chunks):
                    print(f"⏳ Chunk {i+1}/{len(chunks)}")
                    rewritten = self.rewrite(chunk)
                    result.append(rewritten)
                    time.sleep(1)
                
                script = self.fix_names('\n\n'.join(result))
                
                with open("s1.txt", "w", encoding="utf-8") as f:
                    f.write(script)
                print("✅ Saved as s1.txt")
                return script

        Generator().run()
        EOF
        
        python gen.py
        rm gen.py
        
    - name: Commit
      run: |
        git config --global user.name "cowboycode9"
        git config --global user.email "cowboycode9@outlook.com"
        
        if [ -f "s1.txt" ]; then
          git add s1.txt
          if ! git diff --staged --quiet; then
            git commit -m "NBA script $(date '+%Y-%m-%d %H:%M')"
            git push
          fi
        fi
