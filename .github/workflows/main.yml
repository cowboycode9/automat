name: Generate Unique NBA Script
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  push:
    branches: [ main ]
permissions:
  contents: write
jobs:
  generate-script:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
        fetch-depth: 0
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests feedparser playwright beautifulsoup4
        
    - name: Install Playwright browser
      run: playwright install chromium
      
    - name: Create Python script
      run: |
        cat > generate_script.py << 'EOF'
        import time
        import requests
        import re
        from bs4 import BeautifulSoup
        from playwright.sync_api import sync_playwright
        import feedparser

        CONFIG = {
            "chunk_size": 50,
            "max_retries": 3,
            "retry_delay": 3,
            "scraper_timeout": 30000,
            "api_timeout": 30,
        }

        class YouTubeScriptGenerator:
            def __init__(self):
                self.config = CONFIG
                self.base_url = "https://text.pollinations.ai"
                self.channel_id = "UCtG-elouHQdUnpN9cVLdltg"
            
            def get_latest_video_id(self):
                feed_url = f"https://www.youtube.com/feeds/videos.xml?channel_id={self.channel_id}"
                feed = feedparser.parse(feed_url)
                if feed.entries:
                    video_link = feed.entries[0].link
                    video_id_match = re.search(r"v=([a-zA-Z0-9_-]+)", video_link)
                    return video_id_match.group(1) if video_id_match else None
                return None
            
            def get_transcript(self, video_id):
                with sync_playwright() as p:
                    browser = p.chromium.launch(headless=True)
                    page = browser.new_page()
                    
                    try:
                        page.goto("https://youtubetotranscript.com/", timeout=self.config["scraper_timeout"])
                        page.wait_for_load_state("networkidle")
                        
                        page.fill("input[placeholder*='YouTube']", f"https://youtu.be/{video_id}")
                        page.click("button:has-text('Get Transcript')")
                        
                        page.wait_for_selector("#transcript", timeout=self.config["scraper_timeout"])
                        time.sleep(2)
                        
                        segments = page.query_selector_all("#transcript .transcript-segment")
                        transcript = " ".join(seg.text_content().strip() for seg in segments if seg.text_content().strip())
                        return transcript
                        
                    except Exception as e:
                        print(f"Transcript extraction failed: {str(e)}")
                        return ""
                    finally:
                        browser.close()
            
            def rewrite_text(self, text):
                prompt = f"Rewrite this to be completely unique while maintaining meaning. Keep word count similar. Add [PAUSE] markers for TTS: {text}"
                url = f"{self.base_url}/{requests.utils.quote(prompt)}"
                
                for attempt in range(self.config["max_retries"]):
                    try:
                        response = requests.get(url, timeout=self.config["api_timeout"])
                        if response.status_code == 200:
                            return response.text.strip()
                        elif response.status_code == 429:
                            time.sleep(self.config["retry_delay"] * (2 ** attempt))
                    except Exception:
                        if attempt == self.config["max_retries"] - 1:
                            break
                        time.sleep(self.config["retry_delay"])
                
                return text
            
            def generate_script(self):
                video_id = self.get_latest_video_id()
                if not video_id:
                    print("Failed to get latest video ID")
                    return None
                
                transcript = self.get_transcript(video_id)
                if not transcript:
                    print("Failed to get transcript")
                    return None
                
                words = transcript.split()
                chunks = [' '.join(words[i:i + self.config["chunk_size"]]) 
                         for i in range(0, len(words), self.config["chunk_size"])]
                
                rewritten = []
                for chunk in chunks:
                    rewritten_chunk = self.rewrite_text(chunk)
                    rewritten.append(rewritten_chunk)
                    time.sleep(0.5)
                
                return '\n\n'.join(rewritten).strip()

        def main():
            print("🚀 Starting script generation...")
            generator = YouTubeScriptGenerator()
            script = generator.generate_script()
            
            if script:
                with open("s1.txt", "w", encoding="utf-8") as f:
                    f.write(script)
                print(f"✅ Success! Script saved to s1.txt ({len(script.split())} words)")
                print("First 200 characters:")
                print(script[:200])
            else:
                print("❌ Script generation failed")

        if __name__ == "__main__":
            main()
        EOF
        
    - name: Run script generation
      timeout-minutes: 30
      run: |
        echo "Starting script generation..."
        python generate_script.py
        echo "Script generation completed."
        echo "Current directory contents:"
        ls -la
        echo "Checking s1.txt:"
        if [ -f "s1.txt" ]; then
          echo "✅ s1.txt exists"
          echo "File size: $(wc -c < s1.txt) bytes"
          echo "Word count: $(wc -w < s1.txt) words"
          echo "First 3 lines:"
          head -n 3 s1.txt
        else
          echo "❌ s1.txt not found"
        fi
      
    - name: Set up Git identity
      run: |
        git config --global user.name "cowboycode9"
        git config --global user.email "cowboycode9@outlook.com"
        
    - name: Commit and push generated files
      run: |
        echo "Git status before adding:"
        git status
        
        if [ -f "s1.txt" ]; then
          echo "Adding s1.txt to git..."
          git add s1.txt
          echo "Git status after adding:"
          git status
          
          if git diff --staged --quiet; then
            echo "No changes to commit (s1.txt is unchanged)"
          else
            echo "Committing changes..."
            timestamp=$(TZ="UTC" date +"%Y-%m-%d %H:%M:%S UTC")
            git commit -m "Generated TikTok NBA script: ${timestamp}"
            echo "Pushing to repository..."
            git push
            echo "✅ Successfully pushed s1.txt to repository"
          fi
        else
          echo "s1.txt not found - cannot commit"
          exit 1
        fi
