name: Generate Unique NBA Script
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  generate-script:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GH_PAT }}
      
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - run: |
        pip install requests feedparser playwright beautifulsoup4
        playwright install chromium
        
    - name: Generate Script
      run: |
        cat > gen.py << 'EOF'
        import requests, re, time, feedparser
        from bs4 import BeautifulSoup
        from playwright.sync_api import sync_playwright, TimeoutError as PTimeout
        
        class ScriptGen:
            def __init__(self):
                self.base_url = "https://text.pollinations.ai"
                self.timeout = 30000
            
            def get_channel_id(self, handle):
                try:
                    h = handle.replace('@', '').replace('https://youtube.com/@', '').replace('https://www.youtube.com/@', '')
                    feed = feedparser.parse(f"https://www.youtube.com/feeds/videos.xml?user={h}")
                    if not feed.entries:
                        feed = feedparser.parse(f"https://www.youtube.com/feeds/videos.xml?channel_id={h}")
                    if feed.entries:
                        link = feed.feed.get('link', '')
                        if 'channel/' in link:
                            return link.split('channel/')[-1]
                    return 'amhoops' in handle.lower() and "UCtG-elouHQdUnpN9cVLdltg" or None
                except: return None
            
            def get_latest_video(self, channel_id):
                try:
                    feed = feedparser.parse(f"https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}")
                    if feed.entries:
                        match = re.search(r"v=([a-zA-Z0-9_-]+)", feed.entries[0].link)
                        return match.group(1) if match else None
                except: return None
            
            def get_transcript(self, video_id):
                with sync_playwright() as p:
                    browser = p.chromium.launch(headless=True)
                    page = browser.new_page()
                    try:
                        page.goto("https://youtubetotranscript.com/", timeout=self.timeout)
                        page.wait_for_load_state("networkidle", timeout=self.timeout)
                        
                        input_sel = "input.w-full.mb-2.truncate.input.input-bordered.input-rounded.sm\\:w-sm.sm\\:mb-0.sm\\:mr-2"
                        page.fill(input_sel, f"https://youtu.be/{video_id}")
                        page.click("button.w-full.btn.btn-secondary.btn-rounded.sm\\:w-auto")
                        page.wait_for_load_state("networkidle", timeout=self.timeout)
                        time.sleep(3)
                        
                        soup = BeautifulSoup(page.content(), 'html.parser')
                        div = soup.find('div', {'id': 'transcript'})
                        if div:
                            segments = div.find_all('span', class_='transcript-segment')
                            return " ".join(s.get_text().strip() for s in segments if s.get_text().strip())
                        return ""
                    except: return ""
                    finally: browser.close()
            
            def split_chunks(self, text, size=50):
                words = text.split()
                chunks = []
                for i in range(0, len(words), size):
                    chunks.append(' '.join(words[i:i+size]))
                return chunks
            
            def rewrite_chunk(self, chunk):
                prompt = f"Rewrite this NBA text to be unique while keeping the same meaning and word count. Make it conversational with [PAUSE] markers for TTS. Keep all NBA player names, teams, coaches 100% accurate (Tyrese Maxey, Jared McCain, Kyle Lowry, Kelly Oubre Jr, Nikola Jokic, etc): {chunk}"
                url = f"{self.base_url}/{requests.utils.quote(prompt)}"
                
                for attempt in range(3):
                    try:
                        r = requests.get(url, timeout=30)
                        if r.status_code == 200:
                            return r.text.strip()
                        elif r.status_code == 429:
                            time.sleep(3 * (2 ** attempt))
                    except Exception as e:
                        if attempt < 2:
                            time.sleep(3 * (2 ** attempt))
                return chunk
            
            def fix_names(self, text):
                fixes = {
                    r'Dyres?\s*Maxi': 'Tyrese Maxey',
                    r'VJ\s*Edgecom': 'Jared McCain', 
                    r'Kyle\s*Larry': 'Kyle Lowry',
                    r'Kelly\s*Ubé': 'Kelly Oubre Jr',
                    r'Nicole?\s*Joic': 'Nikola Jokic'
                }
                for pattern, fix in fixes.items():
                    text = re.sub(pattern, fix, text, flags=re.IGNORECASE)
                return text
            
            def generate(self, channel):
                print("🎬 Starting...")
                
                channel_id = self.get_channel_id(channel)
                if not channel_id:
                    print("❌ No channel ID")
                    return None
                
                video_id = self.get_latest_video(channel_id)
                if not video_id:
                    print("❌ No video found")
                    return None
                
                transcript = self.get_transcript(video_id)
                if not transcript:
                    print("❌ No transcript")
                    return None
                
                print(f"✅ Got {len(transcript.split())} words")
                
                chunks = self.split_chunks(transcript)
                rewritten = []
                
                for i, chunk in enumerate(chunks):
                    print(f"⏳ Chunk {i+1}/{len(chunks)}")
                    rewritten.append(self.rewrite_chunk(chunk))
                    time.sleep(0.5)
                
                script = self.fix_names('\n\n'.join(rewritten))
                
                with open("s1.txt", "w", encoding="utf-8") as f:
                    f.write(script)
                
                print("✅ Done!")
                return script
        
        ScriptGen().generate("https://youtube.com/@amhoops")
        EOF
        
        python gen.py && rm -f gen.py
        
    - name: Commit
      run: |
        git config --global user.name "cowboycode9"
        git config --global user.email "cowboycode9@outlook.com"
        
        if [ -f "s1.txt" ]; then
          git add s1.txt
          if ! git diff --staged --quiet; then
            git commit -m "Generated NBA script - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
            echo "✅ Pushed s1.txt"
          else
            echo "ℹ️ No changes"
          fi
        else
          echo "❌ s1.txt not found"
        fi
